# Form implementation generated from reading ui file 'mainWinVer1.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

import logging
import matplotlib
import datetime
import time

matplotlib.use("QtAgg")

from PyQt6 import QtCore, QtGui, QtWidgets
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure

from db_operation_functions import queryComposer
from addSensorUIForm import addSensorUIDIalog
from addEquipFormUI import addEquipUIDIalog
from editSensorUIForm import editSensorUIDIalog
from editEquipFormUI import editEquipUIDIalog
from newEditRiskUIForm import editRiskUIDialog
from newAddRiskUIForm import addRiskUIDialog
from newEditPMUIForm import editMeasureUIDialog
from newAddPMUIForm import addMeasureUIDialog
from plot_opt import risk_matrix_, last_sensor_plot

csfont = {"fontname": "Calibri"}
matplotlib.rcParams["font.family"] = "Calibri"
logging.basicConfig(filename="example.log", level=logging.INFO)


def value_to_interval_prob(value):
    """
    Значение в базе данных хранится в числах.
    Функция нужна чтобы преобразовать числа в слова


    :param value: value in database
    :type value: integer
    :return: description of value
    :rtype: str
    """
    if value is None:
        return "Очень низкая"
    if value < 20:
        return "Очень низкая"
    elif value < 40:
        return "Низкая"
    elif value < 60:
        return "Средняя"
    elif value < 80:
        return "Высокая"
    else:
        return "Очень высокая"


def value_to_interval_dmg(value):
    """
    Значение в базе данных хранится в числах.
    Функция нужна чтобы преобразовать числа в слова


    :param value: value in database
    :type value: integer
    :return: description of value
    :rtype: str
    """
    if value is None:
        return "    Очень низкий"
    if value < 20:
        return "Очень низкий"
    elif value < 40:
        return "Низкий"
    elif value < 60:
        return "Средний"
    elif value < 80:
        return "Высокий"
    else:
        return "Очень высокий"


class MplCanvas(FigureCanvasQTAgg):
    def __init__(
        self, parent=None, width=5, height=4, dpi=100, current_sensor_data=None
    ):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111, autoscale_on=False)
        self.axes.grid()
        self.axes.set_xticks([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60])
        self.axes.set_xticklabels(
            [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60],
        )
        self.axes.axhline(
            y=0.8 * current_sensor_data["limit_mode_value"],
            linestyle="--",
            color="red",
            dashes=(5, 5),
        )
        self.axes.set_title(current_sensor_data["sensor_name"], fontdict=csfont)

        self.axes.set_ylabel(
            f"Значение, {current_sensor_data['unit_name']}",
        )

        self.axes.set_xlim(0, 60)
        self.axes.set_ylim(0, current_sensor_data["limit_mode_value"])

        (self.line,) = self.axes.plot([], [], "b", alpha=0.4)
        self.fill = self.axes.fill_between([], [], facecolor="blue", alpha=0.2)
        self.axes.grid(animated=True)
        super(MplCanvas, self).__init__(fig)

    def update_plot(self, x_data, y_data):
        self.line.set_data(x_data, y_data)
        self.fill.remove()
        self.fill = self.axes.fill_between(x_data, y_data, facecolor="blue", alpha=0.2)
        self.draw()


class deleteConfirmWindow(QtWidgets.QMessageBox):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Подтверждение")
        self.setText(
            "Вы уверены что хотите удалить эту запись? Связанные записи будут удалены."
        )
        self.setStandardButtons(
            QtWidgets.QMessageBox.StandardButton.Yes
            | QtWidgets.QMessageBox.StandardButton.No
        )
        self.setIcon(QtWidgets.QMessageBox.Icon.Question)


class ConfirmationDialog(QtWidgets.QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Подтверждение")
        qbtn = (
            QtWidgets.QDialogButtonBox.StandardButton.Yes
            | QtWidgets.QDialogButtonBox.StandardButton.No
        )
        self.buttonBox = QtWidgets.QDialogButtonBox(qbtn)
        self.buttonBox.accepted.connect(self.accepted)
        self.buttonBox.rejected.connect(self.rejected)
        message = QtWidgets.QLabel("Вы уверены что хотите удалить эту запись?")
        self.layout = QtWidgets.QVBoxLayout()
        self.layout.addWidget(message)
        self.layout.addWidget(self.buttonBox)
        self.setLayout(self.layout)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 800)
        self.central_widget = QtWidgets.QWidget(parent=MainWindow)
        self.central_widget.setObjectName("central_widget")
        # tab widget init
        self.tab_widget = QtWidgets.QTabWidget(parent=self.central_widget)
        self.tab_widget.setGeometry(QtCore.QRect(5, 5, 1190, 770))
        self.tab_widget.setObjectName("tab_widget")

        # risk register tab
        self.risk_register_tab = QtWidgets.QWidget()
        self.risk_register_tab.setObjectName("risk_register_tab")

        self.risk_register_groupbox = QtWidgets.QGroupBox(parent=self.risk_register_tab)
        self.risk_register_groupbox.setGeometry(QtCore.QRect(5, 5, 1180, 450))
        self.risk_register_groupbox.setObjectName("risk_register_groupbox")

        self.h_layout_widget_1 = QtWidgets.QWidget(parent=self.risk_register_groupbox)
        self.h_layout_widget_1.setGeometry(QtCore.QRect(10, 10, 615, 45))
        self.h_layout_widget_1.setObjectName("h_layout_widget_1")
        self.h_layout_widget_2 = QtWidgets.QHBoxLayout(self.h_layout_widget_1)
        self.h_layout_widget_2.setContentsMargins(0, 0, 0, 0)
        self.h_layout_widget_2.setObjectName("h_layout_widget_2")
        # risk management buttons
        self.risk_add_button = QtWidgets.QPushButton(parent=self.h_layout_widget_1)
        self.risk_add_button.setObjectName("risk_add_button")
        self.risk_add_button.clicked.connect(self.risk_add_button_slot)
        self.h_layout_widget_2.addWidget(self.risk_add_button)

        self.risk_edit_button = QtWidgets.QPushButton(parent=self.h_layout_widget_1)
        self.risk_edit_button.setObjectName("risk_edit_button")
        self.risk_edit_button.clicked.connect(self.risk_edit_button_slot)
        self.h_layout_widget_2.addWidget(self.risk_edit_button)

        self.risk_delete_button = QtWidgets.QPushButton(parent=self.h_layout_widget_1)
        self.risk_delete_button.setObjectName("risk_delete_button")
        self.risk_delete_button.clicked.connect(self.risk_delete_button_slot)
        self.h_layout_widget_2.addWidget(self.risk_delete_button)

        self.risk_refresh_button = QtWidgets.QPushButton(parent=self.h_layout_widget_1)
        self.risk_refresh_button.setObjectName("risk_refresh_button")
        self.risk_refresh_button.clicked.connect(self.risk_refresh_button_slot)
        self.h_layout_widget_2.addWidget(self.risk_refresh_button)

        self.risk_matrix_button = QtWidgets.QPushButton(parent=self.h_layout_widget_1)
        self.risk_matrix_button.setObjectName("risk_refresh_button")
        self.risk_matrix_button.setText("Матрица рисков")
        self.risk_matrix_button.clicked.connect(risk_matrix_)
        self.h_layout_widget_2.addWidget(self.risk_matrix_button)

        self.risk_register_table_widget = QtWidgets.QTableWidget(
            parent=self.risk_register_groupbox
        )
        self.risk_register_table_widget.setEditTriggers(
            QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers
        )
        # risk register table
        self.risk_register_table_widget.setGeometry(QtCore.QRect(5, 50, 1170, 390))
        self.risk_register_table_widget.setObjectName("risk_register_table_widget")
        self.risk_register_table_widget.setColumnCount(8)
        self.risk_register_table_widget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.risk_register_table_widget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.risk_register_table_widget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.risk_register_table_widget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.risk_register_table_widget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.risk_register_table_widget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.risk_register_table_widget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.risk_register_table_widget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.risk_register_table_widget.setHorizontalHeaderItem(7, item)
        self.risk_register_table_widget.setColumnWidth(0, 40)
        self.risk_register_table_widget.setColumnWidth(1, 285)
        self.risk_register_table_widget.setColumnWidth(2, 150)
        self.risk_register_table_widget.setColumnWidth(3, 200)
        self.risk_register_table_widget.setColumnWidth(4, 100)
        self.risk_register_table_widget.setColumnWidth(5, 100)
        self.risk_register_table_widget.setColumnWidth(6, 100)
        self.risk_register_table_widget.setColumnWidth(7, 150)
        self.risk_register_table_widget.cellClicked.connect(self.risk_row_selector)

        # prevention measures table
        self.pm_groupbox = QtWidgets.QGroupBox(parent=self.risk_register_tab)
        self.pm_groupbox.setGeometry(QtCore.QRect(5, 460, 1180, 280))
        self.pm_groupbox.setObjectName("pm_groupbox")
        self.h_layout_widget_3 = QtWidgets.QWidget(parent=self.pm_groupbox)
        self.h_layout_widget_3.setGeometry(QtCore.QRect(10, 10, 495, 44))
        self.h_layout_widget_3.setObjectName("h_layout_widget_3")
        self.button_field = QtWidgets.QHBoxLayout(self.h_layout_widget_3)
        self.button_field.setContentsMargins(0, 0, 0, 0)
        self.button_field.setObjectName("button_field")
        # pm managment buttons
        self.pm_add_button = QtWidgets.QPushButton(parent=self.h_layout_widget_3)
        self.pm_add_button.setObjectName("pm_add_button")
        self.pm_add_button.clicked.connect(self.pm_add_button_slot)
        self.button_field.addWidget(self.pm_add_button)

        self.pm_edit_button = QtWidgets.QPushButton(parent=self.h_layout_widget_3)
        self.pm_edit_button.setObjectName("pm_edit_button")
        self.pm_edit_button.clicked.connect(self.pm_edit_button_slot)
        self.button_field.addWidget(self.pm_edit_button)

        self.pm_delete_button = QtWidgets.QPushButton(parent=self.h_layout_widget_3)
        self.pm_delete_button.setObjectName("pm_delete_button")
        self.button_field.addWidget(self.pm_delete_button)
        self.pm_delete_button.clicked.connect(self.pm_delete_button_slot)

        self.pm_refresh_button = QtWidgets.QPushButton(parent=self.h_layout_widget_3)
        self.pm_refresh_button.setObjectName("pm_refresh_button")
        self.pm_refresh_button.clicked.connect(self.pm_refresh_button_slot)
        self.button_field.addWidget(self.pm_refresh_button)
        # pm table itself
        self.pm_table_widget = QtWidgets.QTableWidget(parent=self.pm_groupbox)
        self.pm_table_widget.setEditTriggers(
            QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers
        )
        self.pm_table_widget.setGeometry(QtCore.QRect(5, 50, 1170, 220))
        self.pm_table_widget.setObjectName("pm_table_widget")
        self.pm_table_widget.setColumnCount(6)
        self.pm_table_widget.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.pm_table_widget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.pm_table_widget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.pm_table_widget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.pm_table_widget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.pm_table_widget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.pm_table_widget.setHorizontalHeaderItem(5, item)
        self.pm_table_widget.setColumnWidth(0, 40)
        self.pm_table_widget.setColumnWidth(1, 80)
        self.pm_table_widget.setColumnWidth(2, 300)
        self.pm_table_widget.setColumnWidth(3, 300)
        self.pm_table_widget.setColumnWidth(4, 100)
        self.pm_table_widget.setColumnWidth(5, 100)
        self.pm_table_widget.cellClicked.connect(self.pm_row_selector)

        self.tab_widget.addTab(self.risk_register_tab, "")
        # equipment tab
        self.equipment_tab = QtWidgets.QWidget()
        self.equipment_tab.setObjectName("equipment_tab")
        self.tab_widget.addTab(self.equipment_tab, "")
        MainWindow.setCentralWidget(self.central_widget)
        # graphical view thing
        self.graphical_view_frame = QtWidgets.QFrame(self.equipment_tab)
        self.graphical_view_frame.setGeometry(QtCore.QRect(380, 10, 850, 450))
        self.graphical_view_frame.setObjectName("graphical_view_frame")
        self.graphical_view_layout = QtWidgets.QHBoxLayout(self.graphical_view_frame)
        # sensor table
        self.sensor_table_widget = QtWidgets.QTableWidget(parent=self.equipment_tab)
        self.sensor_table_widget.setEditTriggers(
            QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers
        )
        self.sensor_table_widget.setGeometry(QtCore.QRect(10, 260, 400, 200))
        self.sensor_table_widget.setObjectName("sensor_table_widget")
        self.sensor_table_widget.setColumnCount(3)
        self.sensor_table_widget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.sensor_table_widget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.sensor_table_widget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.sensor_table_widget.setHorizontalHeaderItem(2, item)
        self.sensor_table_widget.setColumnWidth(0, 40)
        self.sensor_table_widget.setColumnWidth(1, 200)
        self.sensor_table_widget.setColumnWidth(2, 120)
        self.sensor_table_widget.cellClicked.connect(self.sensor_row_selector)

        # sensor managment buttons

        self.equip_sensor_manage_groupbox = QtWidgets.QGroupBox(
            parent=self.equipment_tab
        )
        self.equip_sensor_manage_groupbox.setGeometry(QtCore.QRect(10, 460, 350, 260))
        self.equip_sensor_manage_groupbox.setObjectName("equip_sensor_manage_groupbox")
        self.sensor_manage_groupbox = QtWidgets.QGroupBox(
            parent=self.equip_sensor_manage_groupbox
        )
        self.sensor_manage_groupbox.setGeometry(QtCore.QRect(0, 100, 350, 70))
        self.sensor_manage_groupbox.setObjectName("sensor_manage_groupbox")
        self.h_layout_widget_2 = QtWidgets.QHBoxLayout(self.sensor_manage_groupbox)
        self.h_layout_widget_2.setObjectName("h_layout_widget_2")

        self.sensor_add_button = QtWidgets.QPushButton(
            parent=self.sensor_manage_groupbox
        )
        self.sensor_add_button.setObjectName("sensor_add_button")
        self.sensor_add_button.clicked.connect(self.sensor_add_button_slot)
        self.h_layout_widget_2.addWidget(self.sensor_add_button)

        self.sensor_edit_button = QtWidgets.QPushButton(
            parent=self.sensor_manage_groupbox
        )
        self.sensor_edit_button.setObjectName("sensor_edit_button")
        self.sensor_edit_button.clicked.connect(self.sensor_edit_button_slot)
        self.h_layout_widget_2.addWidget(self.sensor_edit_button)

        self.sensor_delete_button = QtWidgets.QPushButton(
            parent=self.sensor_manage_groupbox
        )
        self.sensor_delete_button.setObjectName("sensor_delete_button")
        self.sensor_delete_button.clicked.connect(self.sensor_delete_button_slot)
        self.h_layout_widget_2.addWidget(self.sensor_delete_button)

        self.sensor_refresh_button = QtWidgets.QPushButton(
            parent=self.sensor_manage_groupbox
        )
        self.sensor_refresh_button.clicked.connect(self.sensor_refresh_button_slot)
        self.sensor_refresh_button.setObjectName("sensor_refresh_button")
        self.h_layout_widget_2.addWidget(self.sensor_refresh_button)

        # equip management buttons
        self.equip_manage_groupbox = QtWidgets.QGroupBox(
            parent=self.equip_sensor_manage_groupbox
        )
        self.equip_manage_groupbox.setGeometry(QtCore.QRect(0, 30, 350, 70))
        self.equip_manage_groupbox.setObjectName("equip_manage_groupbox")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.equip_manage_groupbox)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        self.equip_add_button = QtWidgets.QPushButton(parent=self.equip_manage_groupbox)
        self.equip_add_button.setObjectName("equip_add_button")
        self.equip_add_button.clicked.connect(self.equip_add_button_slot)
        self.horizontalLayout_2.addWidget(self.equip_add_button)

        self.equip_edit_button = QtWidgets.QPushButton(
            parent=self.equip_manage_groupbox
        )
        self.equip_edit_button.setObjectName("equip_edit_button")
        self.equip_edit_button.clicked.connect(self.equip_edit_button_slot)
        self.horizontalLayout_2.addWidget(self.equip_edit_button)

        self.equip_delete_button = QtWidgets.QPushButton(
            parent=self.equip_manage_groupbox
        )
        self.equip_delete_button.setObjectName("equip_delete_button")
        self.equip_delete_button.clicked.connect(self.equip_delete_button_slot)
        self.horizontalLayout_2.addWidget(self.equip_delete_button)

        self.equip_refresh_button = QtWidgets.QPushButton(
            parent=self.equip_manage_groupbox
        )
        self.equip_refresh_button.setObjectName("equip_refresh_button")
        self.equip_refresh_button.clicked.connect(self.equip_refresh_button_slot)
        self.horizontalLayout_2.addWidget(self.equip_refresh_button)

        # additional buttons
        self.additional_manage_groupbox = QtWidgets.QGroupBox(
            parent=self.equip_sensor_manage_groupbox
        )
        self.additional_manage_groupbox.setTitle("Дополнительные графики")
        self.additional_manage_groupbox.setGeometry(QtCore.QRect(0, 170, 350, 70))
        self.additional_manage_groupbox.setObjectName("sensor_manage_groupbox")
        self.h_layout_widget_3_2 = QtWidgets.QHBoxLayout(
            self.additional_manage_groupbox
        )
        self.h_layout_widget_3_2.setObjectName("h_layout_widget_2")

        self.additional_button_1 = QtWidgets.QPushButton(
            parent=self.additional_manage_groupbox
        )
        self.additional_button_1.setObjectName("additional_button_1")
        self.additional_button_1.setText("Неделя")
        self.additional_button_1.clicked.connect(self.week_button_slot)
        self.h_layout_widget_3_2.addWidget(self.additional_button_1)

        self.additional_button_2 = QtWidgets.QPushButton(
            parent=self.additional_manage_groupbox
        )
        self.additional_button_2.setObjectName("additional_button_2")
        self.additional_button_2.setText("День")

        self.additional_button_2.clicked.connect(self.day_button_slot)
        self.h_layout_widget_3_2.addWidget(self.additional_button_2)

        self.additional_button_3 = QtWidgets.QPushButton(
            parent=self.additional_manage_groupbox
        )
        self.additional_button_3.setObjectName("additional_button_3")
        self.additional_button_3.setText("Час")

        self.additional_button_3.clicked.connect(self.hour_button_slot)
        self.h_layout_widget_3_2.addWidget(self.additional_button_3)

        # equip table
        self.equip_table_widget = QtWidgets.QTableWidget(parent=self.equipment_tab)
        self.equip_table_widget.setEditTriggers(
            QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers
        )
        self.equip_table_widget.setGeometry(QtCore.QRect(10, 10, 400, 250))
        self.equip_table_widget.setWordWrap(True)
        self.equip_table_widget.setObjectName("equip_table_widget")
        self.equip_table_widget.setColumnCount(3)
        self.equip_table_widget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.equip_table_widget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.equip_table_widget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.equip_table_widget.setHorizontalHeaderItem(2, item)
        self.equip_table_widget.setColumnWidth(0, 40)
        self.equip_table_widget.setColumnWidth(1, 235)
        self.equip_table_widget.setColumnWidth(2, 80)
        self.equip_table_widget.cellClicked.connect(self.equipment_row_selector)

        # equip additional info gb
        self.equip_info_groupbox = QtWidgets.QGroupBox(parent=self.equipment_tab)
        self.equip_info_groupbox.setGeometry(QtCore.QRect(370, 460, 400, 260))
        self.equip_info_groupbox.setObjectName("equip_info_groupbox")
        self.f_layout_widget = QtWidgets.QWidget(parent=self.equip_info_groupbox)
        self.f_layout_widget.setGeometry(QtCore.QRect(10, 20, 390, 230))
        self.f_layout_widget.setObjectName("f_layout_widget")
        self.equip_layout = QtWidgets.QFormLayout(self.f_layout_widget)
        self.equip_layout.setRowWrapPolicy(
            QtWidgets.QFormLayout.RowWrapPolicy.DontWrapRows
        )
        self.equip_layout.setContentsMargins(0, 0, 0, 0)
        self.equip_layout.setHorizontalSpacing(20)
        self.equip_layout.setVerticalSpacing(15)
        self.equip_layout.setObjectName("equip_layout")
        self.equip_name_label = QtWidgets.QLabel(parent=self.f_layout_widget)
        self.equip_name_label.setObjectName("equip_name_label")
        self.equip_layout.setWidget(
            0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.equip_name_label
        )
        self.equip_name_field = QtWidgets.QLabel(parent=self.f_layout_widget)
        self.equip_name_field.setText("")
        self.equip_name_field.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        self.equip_name_field.setScaledContents(True)
        self.equip_name_field.setWordWrap(True)
        self.equip_name_field.setObjectName("equip_name_field")
        self.equip_layout.setWidget(
            0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.equip_name_field
        )
        self.design_label = QtWidgets.QLabel(parent=self.f_layout_widget)
        self.design_label.setObjectName("design_label")
        self.equip_layout.setWidget(
            1, QtWidgets.QFormLayout.ItemRole.LabelRole, self.design_label
        )
        self.design_field = QtWidgets.QLabel(parent=self.f_layout_widget)
        self.design_field.setText("")
        self.design_field.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        self.design_field.setScaledContents(True)
        self.design_field.setWordWrap(True)
        self.design_field.setObjectName("design_field")
        self.equip_layout.setWidget(
            1, QtWidgets.QFormLayout.ItemRole.FieldRole, self.design_field
        )
        self.equip_type_label = QtWidgets.QLabel(parent=self.f_layout_widget)
        self.equip_type_label.setObjectName("equip_type_label")
        self.equip_layout.setWidget(
            2, QtWidgets.QFormLayout.ItemRole.LabelRole, self.equip_type_label
        )
        self.equip_type_field = QtWidgets.QLabel(parent=self.f_layout_widget)
        self.equip_type_field.setText("")
        self.equip_type_field.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        self.equip_type_field.setScaledContents(True)
        self.equip_type_field.setWordWrap(True)
        self.equip_type_field.setObjectName("equip_type_field")
        self.equip_layout.setWidget(
            2, QtWidgets.QFormLayout.ItemRole.FieldRole, self.equip_type_field
        )
        self.manufact_label = QtWidgets.QLabel(parent=self.f_layout_widget)
        self.manufact_label.setObjectName("manufact_label")
        self.equip_layout.setWidget(
            3, QtWidgets.QFormLayout.ItemRole.LabelRole, self.manufact_label
        )
        self.manufact_field = QtWidgets.QLabel(parent=self.f_layout_widget)
        self.manufact_field.setText("")
        self.manufact_field.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        self.manufact_field.setScaledContents(True)
        self.manufact_field.setWordWrap(True)
        self.manufact_field.setObjectName("manufact_field")
        self.equip_layout.setWidget(
            3, QtWidgets.QFormLayout.ItemRole.FieldRole, self.manufact_field
        )
        self.installation_date_label = QtWidgets.QLabel(parent=self.f_layout_widget)
        self.installation_date_label.setObjectName("installation_date_label")
        self.equip_layout.setWidget(
            4, QtWidgets.QFormLayout.ItemRole.LabelRole, self.installation_date_label
        )
        self.installation_date_feild = QtWidgets.QLabel(parent=self.f_layout_widget)
        self.installation_date_feild.setText("")
        self.installation_date_feild.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        self.installation_date_feild.setScaledContents(True)
        self.installation_date_feild.setWordWrap(True)
        self.installation_date_feild.setObjectName("installation_date_feild")
        self.equip_layout.setWidget(
            4, QtWidgets.QFormLayout.ItemRole.FieldRole, self.installation_date_feild
        )
        self.lifetime_label = QtWidgets.QLabel(parent=self.f_layout_widget)
        self.lifetime_label.setObjectName("lifetime_label")
        self.equip_layout.setWidget(
            5, QtWidgets.QFormLayout.ItemRole.LabelRole, self.lifetime_label
        )
        self.lifetime_field = QtWidgets.QLabel(parent=self.f_layout_widget)
        self.lifetime_field.setText("")
        self.lifetime_field.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        self.lifetime_field.setScaledContents(True)
        self.lifetime_field.setWordWrap(True)
        self.lifetime_field.setObjectName("lifetime_field")
        self.equip_layout.setWidget(
            5, QtWidgets.QFormLayout.ItemRole.FieldRole, self.lifetime_field
        )
        self.equip_status_label = QtWidgets.QLabel(parent=self.f_layout_widget)
        self.equip_status_label.setObjectName("equip_status_label")
        self.equip_layout.setWidget(
            6, QtWidgets.QFormLayout.ItemRole.LabelRole, self.equip_status_label
        )
        self.equip_status_field = QtWidgets.QLabel(parent=self.f_layout_widget)
        self.equip_status_field.setText("")
        self.equip_status_field.setTextFormat(QtCore.Qt.TextFormat.AutoText)
        self.equip_status_field.setScaledContents(True)
        self.equip_status_field.setWordWrap(True)
        self.equip_status_field.setObjectName("equip_status_field")
        self.equip_layout.setWidget(
            6, QtWidgets.QFormLayout.ItemRole.FieldRole, self.equip_status_field
        )

        # sensor additional info gb
        self.sensor_info_groupbox = QtWidgets.QGroupBox(parent=self.equipment_tab)
        self.sensor_info_groupbox.setGeometry(QtCore.QRect(780, 460, 400, 260))
        self.sensor_info_groupbox.setObjectName("sensor_info_groupbox")
        self.f_layout_widget_2 = QtWidgets.QWidget(parent=self.sensor_info_groupbox)
        self.f_layout_widget_2.setGeometry(QtCore.QRect(10, 20, 385, 215))
        self.f_layout_widget_2.setObjectName("f_layout_widget_2")
        self.sensor_layout = QtWidgets.QFormLayout(self.f_layout_widget_2)
        self.sensor_layout.setContentsMargins(0, 0, 0, 0)
        self.sensor_layout.setHorizontalSpacing(20)
        self.sensor_layout.setVerticalSpacing(15)
        self.sensor_layout.setObjectName("sensor_layout")
        self.sensor_name_label = QtWidgets.QLabel(parent=self.f_layout_widget_2)
        self.sensor_name_label.setObjectName("sensor_name_label")
        self.sensor_layout.setWidget(
            0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.sensor_name_label
        )
        self.sensor_name_field = QtWidgets.QLabel(parent=self.f_layout_widget_2)
        self.sensor_name_field.setText("")
        self.sensor_name_field.setWordWrap(True)
        self.sensor_name_field.setObjectName("sensor_name_field")
        self.sensor_layout.setWidget(
            0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.sensor_name_field
        )
        self.sensor_type_label = QtWidgets.QLabel(parent=self.f_layout_widget_2)
        self.sensor_type_label.setObjectName("sensor_type_label")
        self.sensor_layout.setWidget(
            1, QtWidgets.QFormLayout.ItemRole.LabelRole, self.sensor_type_label
        )
        self.sensor_type_field = QtWidgets.QLabel(parent=self.f_layout_widget_2)
        self.sensor_type_field.setText("")
        self.sensor_type_field.setWordWrap(True)
        self.sensor_type_field.setObjectName("sensor_type_field")
        self.sensor_layout.setWidget(
            1, QtWidgets.QFormLayout.ItemRole.FieldRole, self.sensor_type_field
        )
        self.unit_label = QtWidgets.QLabel(parent=self.f_layout_widget_2)
        self.unit_label.setObjectName("unit_label")
        self.sensor_layout.setWidget(
            2, QtWidgets.QFormLayout.ItemRole.LabelRole, self.unit_label
        )
        self.unit_field = QtWidgets.QLabel(parent=self.f_layout_widget_2)
        self.unit_field.setText("")
        self.unit_field.setWordWrap(True)
        self.unit_field.setObjectName("unit_field")
        self.sensor_layout.setWidget(
            2, QtWidgets.QFormLayout.ItemRole.FieldRole, self.unit_field
        )
        self.limit_val_label = QtWidgets.QLabel(parent=self.f_layout_widget_2)
        self.limit_val_label.setObjectName("limit_val_label")
        self.sensor_layout.setWidget(
            3, QtWidgets.QFormLayout.ItemRole.LabelRole, self.limit_val_label
        )
        self.limit_val_field = QtWidgets.QLabel(parent=self.f_layout_widget_2)
        self.limit_val_field.setText("")
        self.limit_val_field.setWordWrap(True)
        self.limit_val_field.setObjectName("limit_val_field")
        self.sensor_layout.setWidget(
            3, QtWidgets.QFormLayout.ItemRole.FieldRole, self.limit_val_field
        )
        self.sensor_installation_datelabel = QtWidgets.QLabel(
            parent=self.f_layout_widget_2
        )
        self.sensor_installation_datelabel.setObjectName(
            "sensor_installation_datelabel"
        )
        self.sensor_layout.setWidget(
            4,
            QtWidgets.QFormLayout.ItemRole.LabelRole,
            self.sensor_installation_datelabel,
        )
        self.sensor_installation_date_field = QtWidgets.QLabel(
            parent=self.f_layout_widget_2
        )
        self.sensor_installation_date_field.setText("")
        self.sensor_installation_date_field.setObjectName(
            "sensor_installation_date_field"
        )
        self.sensor_layout.setWidget(
            4,
            QtWidgets.QFormLayout.ItemRole.FieldRole,
            self.sensor_installation_date_field,
        )
        self.sensor_averge_lifetime_label = QtWidgets.QLabel(
            parent=self.f_layout_widget_2
        )
        self.sensor_averge_lifetime_label.setObjectName("sensor_averge_lifetime_label")
        self.sensor_layout.setWidget(
            5,
            QtWidgets.QFormLayout.ItemRole.LabelRole,
            self.sensor_averge_lifetime_label,
        )
        self.sensor_average_lifetime_field = QtWidgets.QLabel(
            parent=self.f_layout_widget_2
        )
        self.sensor_average_lifetime_field.setText("")
        self.sensor_average_lifetime_field.setObjectName(
            "sensor_average_lifetime_field"
        )
        self.sensor_layout.setWidget(
            5,
            QtWidgets.QFormLayout.ItemRole.FieldRole,
            self.sensor_average_lifetime_field,
        )

        self.tab_widget.addTab(self.equipment_tab, "")
        MainWindow.setCentralWidget(self.central_widget)

        # data setup
        self.risk_refresh_button_slot()
        self.pm_refresh_button_slot()
        self.equip_refresh_button_slot()
        self.sensor_refresh_button_slot()

        # graphical view
        current_sensor_data = self.sensor_data_id_ref[int(self.current_sensor_id)]
        current_sensor_data["unit_name"] = self.sensor_unit_id_ref[
            current_sensor_data["unit_id"]
        ]
        self.canvas = MplCanvas(
            parent=self.equipment_tab,
            width=5,
            height=4,
            dpi=100,
            current_sensor_data=current_sensor_data,
        )
        self.graphical_view_layout.addWidget(self.canvas)
        self.timer = QtCore.QTimer()
        self.timer.setInterval(100)
        self.timer.timeout.connect(self.update_plot)
        self.timer.start()

        self.retranslateUi(MainWindow)
        self.tab_widget.setCurrentIndex(0)
        self.risk_register_table_widget.cellDoubleClicked.connect(
            self.risk_register_show_full_info
        )
        self.pm_table_widget.cellDoubleClicked.connect(self.pm_show_full_info)
        self.sensor_table_widget.cellDoubleClicked.connect(self.sensor_show_full_info)
        self.equip_table_widget.cellDoubleClicked.connect(self.equip_show_full_info)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.risk_register_groupbox.setTitle(_translate("MainWindow", "Реестр рисков"))
        self.risk_add_button.setText(_translate("MainWindow", "Добавить"))
        self.risk_edit_button.setText(_translate("MainWindow", "Изменить"))
        self.risk_delete_button.setText(_translate("MainWindow", "Удалить"))
        self.risk_refresh_button.setText(_translate("MainWindow", "Обновить"))
        item = self.risk_register_table_widget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Код"))
        item = self.risk_register_table_widget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Фактор риска"))
        item = self.risk_register_table_widget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Класс"))
        item = self.risk_register_table_widget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Описание"))
        item = self.risk_register_table_widget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Вероятность"))
        item = self.risk_register_table_widget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Ущерб"))
        item = self.risk_register_table_widget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Риск"))
        item = self.risk_register_table_widget.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Отвественный"))
        self.pm_groupbox.setTitle(_translate("MainWindow", "Меры предосторожности"))
        self.pm_add_button.setText(_translate("MainWindow", "Добавить"))
        self.pm_edit_button.setText(_translate("MainWindow", "Изменить"))
        self.pm_delete_button.setText(_translate("MainWindow", "Удалить"))
        self.pm_refresh_button.setText(_translate("MainWindow", "Обновить"))
        item = self.pm_table_widget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Код"))
        item = self.pm_table_widget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Код риска"))
        item = self.pm_table_widget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Название"))
        item = self.pm_table_widget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Описание"))
        item = self.pm_table_widget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Статус"))
        item = self.pm_table_widget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Дата принятия"))
        self.tab_widget.setTabText(
            self.tab_widget.indexOf(self.risk_register_tab),
            _translate("MainWindow", "Реестр рисков"),
        )
        self.tab_widget.setTabText(
            self.tab_widget.indexOf(self.equipment_tab),
            _translate("MainWindow", "Оборудование"),
        )
        item = self.sensor_table_widget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Код"))
        item = self.sensor_table_widget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Датчик"))
        item = self.sensor_table_widget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Тип"))
        self.equip_sensor_manage_groupbox.setTitle(
            _translate("MainWindow", "Управление")
        )
        self.sensor_manage_groupbox.setTitle(_translate("MainWindow", "Датчики"))
        self.sensor_add_button.setText(_translate("MainWindow", "Добавить"))
        self.sensor_edit_button.setText(_translate("MainWindow", "Изменить"))
        self.sensor_delete_button.setText(_translate("MainWindow", "Удалить"))
        self.sensor_refresh_button.setText(_translate("MainWindow", "Обновить"))
        self.equip_manage_groupbox.setTitle(_translate("MainWindow", "Оборудование"))
        self.equip_add_button.setText(_translate("MainWindow", "Добавить"))
        self.equip_edit_button.setText(_translate("MainWindow", "Изменить"))
        self.equip_delete_button.setText(_translate("MainWindow", "Удалить"))
        self.equip_refresh_button.setText(_translate("MainWindow", "Обновить"))
        item = self.equip_table_widget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Код"))
        item = self.equip_table_widget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Оборудование"))
        item = self.equip_table_widget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Статус"))
        self.equip_info_groupbox.setTitle(
            _translate("MainWindow", "Информация об оборудовании")
        )
        self.equip_name_label.setText(_translate("MainWindow", "Название:"))
        self.design_label.setText(_translate("MainWindow", "Обозначение:"))
        self.equip_type_label.setText(_translate("MainWindow", "Тип оборудования:"))
        self.manufact_label.setText(_translate("MainWindow", "Производитель:"))
        self.installation_date_label.setText(
            _translate("MainWindow", "Дата установки:")
        )
        self.lifetime_label.setText(_translate("MainWindow", "Средний срок службы"))
        self.equip_status_label.setText(_translate("MainWindow", "Статус:"))
        self.sensor_info_groupbox.setTitle(
            _translate("MainWindow", "Информация о датчике")
        )
        self.sensor_name_label.setText(_translate("MainWindow", "Название:"))
        self.sensor_type_label.setText(_translate("MainWindow", "Тип:"))
        self.unit_label.setText(_translate("MainWindow", "Единицы:"))
        self.limit_val_label.setText(_translate("MainWindow", "Предельное значение:"))
        self.sensor_installation_datelabel.setText(
            _translate("MainWindow", "Дата добавления:")
        )
        self.sensor_averge_lifetime_label.setText(
            _translate("MainWindow", "Средний срок службы:")
        )
        # self.sensorStatusLabel.setText(_translate("MainWindow", "Статус:"))
        self.tab_widget.setTabText(
            self.tab_widget.indexOf(self.equipment_tab),
            _translate("MainWindow", "Оборудование"),
        )

    # data loaders
    def risk_data_loader(self):
        qcr = queryComposer("risk_register")
        raw_risk_data = qcr.select_query(order_opt=["risk_id"])
        self.risk_data_id_ref = {
            risk["risk_id"]: {key: val for key, val in risk.items() if key != "risk_id"}
            for risk in raw_risk_data
        }
        qcr.close_connection()
        qcc = queryComposer("risk_classification")
        raw_class_data = qcc.select_query()
        qcc.close_connection()
        self.risk_class_id_ref = {
            r_class["risk_class_id"]: r_class["risk_class_name"]
            for r_class in raw_class_data
        }

    def pm_data_loader(self, risk_id: int = None):
        qcpm = queryComposer("prevention_measures")
        conditions = None
        if risk_id is not None:
            conditions = [
                {
                    "key_name": "risk_id",
                    "key_value": risk_id,
                    "comp_operand": "=",
                }
            ]
        raw_pm_data = qcpm.select_query(conditions=conditions)
        qcpm.close_connection()
        self.pm_data_id_ref = {
            pm["prevention_measure_id"]: {
                key: val for key, val in pm.items() if key != "prevention_measure_id"
            }
            for pm in raw_pm_data
        }
        self.risk_pm_rel = {}
        for pm in raw_pm_data:
            if pm["risk_id"] not in self.risk_pm_rel.keys():
                self.risk_pm_rel[pm["risk_id"]] = []
            self.risk_pm_rel[pm["risk_id"]].append(pm["prevention_measure_id"])

    def equip_data_loader(self):
        qce = queryComposer("equipment")
        raw_equip_data = qce.select_query(
            order_opt=["equipment_status DESC", "equipment_id"]
        )
        self.equip_data_id_ref = {
            equip["equipment_id"]: {
                key: val for key, val in equip.items() if key != "equipment_id"
            }
            for equip in raw_equip_data
        }
        qce.close_connection()
        qcet = queryComposer("equipment_type")
        raw_equip_type_data = qcet.select_query(order_opt=["equipment_type_id"])
        qcet.close_connection()
        self.equip_type_id_ref = {
            e_type["equipment_type_id"]: e_type["equipment_type_name"]
            for e_type in raw_equip_type_data
        }

    def sensor_data_loader(self):
        qcs = queryComposer("sensor")
        data_sensor = qcs.select_query(order_opt=["sensor_id"])
        self.sensor_data_id_ref = {
            sensor["sensor_id"]: {
                key: val for key, val in sensor.items() if key != "sensor_id"
            }
            for sensor in data_sensor
        }
        qcs.close_connection()

        self.equip_sensor_rel = {}
        for sensor in data_sensor:
            if sensor["equipment_id"] not in self.equip_sensor_rel:
                self.equip_sensor_rel[sensor["equipment_id"]] = []
            self.equip_sensor_rel[sensor["equipment_id"]].append(sensor["sensor_id"])

        qsst = queryComposer("sensor_type")
        raw_sensor_type_data = qsst.select_query(order_opt=["sensor_type_id"])
        qsst.close_connection()
        self.sensor_type_id_ref = {
            s_type["sensor_type_id"]: s_type["sensor_type_name"]
            for s_type in raw_sensor_type_data
        }
        qcsu = queryComposer("sensor_unit")
        raw_sensor_unit_data = qcsu.select_query(order_opt=["unit_id"])
        qcsu.close_connection()
        self.sensor_unit_id_ref = {
            unit["unit_id"]: unit["unit_name"] for unit in raw_sensor_unit_data
        }
        self.sensor_unit_type_rel = {}
        for unit in raw_sensor_unit_data:
            if unit["sensor_type_id"] not in self.sensor_unit_type_rel.keys():
                self.sensor_unit_type_rel[unit["sensor_type_id"]] = []
            self.sensor_unit_type_rel[unit["sensor_type_id"]].append(unit["unit_id"])

    # table/info placeholder
    def risk_table_placeholder(self):
        """_summary_"""

        self.risk_register_table_widget.setRowCount(len(self.risk_data_id_ref))
        for idx, (key, el) in enumerate(self.risk_data_id_ref.items()):
            self.risk_register_table_widget.setItem(
                idx, 0, QtWidgets.QTableWidgetItem(str(key))
            )
            self.risk_register_table_widget.setItem(
                idx, 1, QtWidgets.QTableWidgetItem(el["risk_name"])
            )
            self.risk_register_table_widget.setItem(
                idx,
                2,
                QtWidgets.QTableWidgetItem(self.risk_class_id_ref[el["risk_class_id"]]),
            )
            self.risk_register_table_widget.setItem(
                idx, 3, QtWidgets.QTableWidgetItem(el["risk_details"])
            )
            self.risk_register_table_widget.setItem(
                idx,
                4,
                QtWidgets.QTableWidgetItem(value_to_interval_prob(el["risk_prob"])),
            )
            self.risk_register_table_widget.setItem(
                idx,
                5,
                QtWidgets.QTableWidgetItem(value_to_interval_dmg(el["risk_damage"])),
            )
            self.risk_register_table_widget.setItem(
                idx, 6, QtWidgets.QTableWidgetItem(str(el["risk_score"]))
            )
            self.risk_register_table_widget.setItem(
                idx, 7, QtWidgets.QTableWidgetItem(el["risk_holder"])
            )
        self.current_risk_id = self.risk_register_table_widget.itemAt(0, 0).text()
        self.risk_register_table_widget.selectRow(0)

    def risk_register_show_full_info(self, row, col):
        cell_text = self.risk_register_table_widget.item(row, col).text()
        popup = QtWidgets.QMessageBox()
        popup.setText(cell_text)
        popup.setWindowTitle("Информация ячейки")
        popup.exec()

    def pm_show_full_info(self, row, col):
        cell_text = self.pm_table_widget.item(row, col).text()
        popup = QtWidgets.QMessageBox()
        popup.setText(cell_text)
        popup.setWindowTitle("Информация ячейки")
        popup.exec()

    def equip_show_full_info(self, row, col):
        cell_text = self.equip_table_widget.item(row, col).text()
        popup = QtWidgets.QMessageBox()
        popup.setText(cell_text)
        popup.setWindowTitle("Информация ячейки")
        popup.exec()

    def sensor_show_full_info(self, row, col):
        cell_text = self.sensor_table_widget.item(row, col).text()
        popup = QtWidgets.QMessageBox()
        popup.setText(cell_text)
        popup.setWindowTitle("Информация ячейки")
        popup.exec()

    def pm_table_placeholder(self, risk_id: int):
        """_summary_

        :param risk_id: _description_, defaults to None
        :type risk_id: _type_, optional
        """
        if int(risk_id) not in self.risk_pm_rel.keys():
            logging.warning("No element for this risk")
            self.pm_table_widget.setRowCount(0)
            self.pm_edit_button.setEnabled(False)
            self.pm_delete_button.setEnabled(False)
            return
        self.pm_table_widget.setRowCount(len(self.risk_pm_rel[int(risk_id)]))
        self.pm_edit_button.setEnabled(True)
        self.pm_delete_button.setEnabled(True)

        for idx, key in enumerate(self.risk_pm_rel[int(risk_id)]):
            el = self.pm_data_id_ref[key]
            self.pm_table_widget.setItem(idx, 0, QtWidgets.QTableWidgetItem(str(key)))
            self.pm_table_widget.setItem(
                idx, 1, QtWidgets.QTableWidgetItem(str(el["risk_id"]))
            )
            self.pm_table_widget.setItem(
                idx, 2, QtWidgets.QTableWidgetItem(el["prevention_measure_name"])
            )
            self.pm_table_widget.setItem(
                idx, 3, QtWidgets.QTableWidgetItem(el["prevention_measure_details"])
            )
            self.pm_table_widget.setItem(
                idx,
                4,
                QtWidgets.QTableWidgetItem(
                    "Принята" if el["prevention_measure_status"] else "Не принята"
                ),
            )
            self.pm_table_widget.setItem(
                idx,
                5,
                QtWidgets.QTableWidgetItem(
                    str(el["prevention_measure_date"])
                    if el["prevention_measure_status"]
                    else "-"
                ),
            )
        self.current_pm_id = self.pm_table_widget.itemAt(0, 0).text()
        self.pm_table_widget.selectRow(0)

    def equip_table_placeholder(self):
        self.equip_table_widget.setRowCount(len(self.equip_data_id_ref))
        for idx, (key, el) in enumerate(self.equip_data_id_ref.items()):
            self.equip_table_widget.setItem(
                idx, 0, QtWidgets.QTableWidgetItem(str(key))
            )
            self.equip_table_widget.setItem(
                idx, 1, QtWidgets.QTableWidgetItem(el["equipment_name"])
            )
            self.equip_table_widget.setItem(
                idx,
                2,
                QtWidgets.QTableWidgetItem(
                    "Активен" if el["equipment_status"] else "Не активен"
                ),
            )
        self.current_equip_id = self.equip_table_widget.itemAt(0, 0).text()
        self.equip_table_widget.selectRow(0)

    def sensor_table_placeholder(self, equipment_id: int):
        if int(equipment_id) not in self.equip_sensor_rel.keys():
            logging.warning("No sensor for this equip")
            self.sensor_table_widget.setRowCount(0)
            self.sensor_edit_button.setEnabled(False)
            self.sensor_delete_button.setEnabled(False)
            return
        self.sensor_table_widget.setRowCount(
            len(self.equip_sensor_rel[int(equipment_id)])
        )
        self.sensor_edit_button.setEnabled(True)
        self.sensor_delete_button.setEnabled(True)

        for idx, key in enumerate(self.equip_sensor_rel[int(equipment_id)]):
            tmp_sensor_inf = self.sensor_data_id_ref[key]
            self.sensor_table_widget.setItem(
                idx, 0, QtWidgets.QTableWidgetItem(str(key))
            )

            self.sensor_table_widget.setItem(
                idx, 1, QtWidgets.QTableWidgetItem(tmp_sensor_inf["sensor_name"])
            )
            self.sensor_table_widget.setItem(
                idx,
                2,
                QtWidgets.QTableWidgetItem(
                    self.sensor_type_id_ref[tmp_sensor_inf["sensor_type_id"]]
                ),
            )
        self.current_sensor_id = self.sensor_table_widget.itemAt(0, 0).text()
        self.sensor_table_widget.selectRow(0)

    def sensor_GB_placeholder(self):
        tmp = self.sensor_data_id_ref[int(self.current_sensor_id)]
        self.sensor_name_field.setText(tmp["sensor_name"])
        self.limit_val_field.setText(str(tmp["limit_mode_value"]))
        self.sensor_type_field.setText(self.sensor_type_id_ref[tmp["sensor_type_id"]])
        self.unit_field.setText(self.sensor_unit_id_ref[tmp["unit_id"]])
        self.sensor_installation_date_field.setText(
            str(tmp["sensor_installation_date"])
        )

        self.sensor_average_lifetime_field.setText(
            "-"
            if tmp["sensor_average_lifetime"] is None
            else str(tmp["sensor_average_lifetime"])
        )

    def equip_GB_placeholder(self):
        tmp = self.equip_data_id_ref[int(self.current_equip_id)]
        self.equip_name_field.setText(tmp["equipment_name"])
        self.design_field.setText(tmp["equipment_designation"])
        self.equip_type_field.setText(self.equip_type_id_ref[tmp["equipment_type_id"]])
        self.manufact_field.setText(tmp["equipment_manufacturer_name"])
        self.installation_date_feild.setText(
            "-"
            if not tmp["equipment_status"]
            else str(tmp["equipment_installation_date"])
        )
        self.lifetime_field.setText(
            "-"
            if tmp["equipment_average_lifetime"] is None
            else str(tmp["equipment_average_lifetime"])
        )
        self.equip_status_field.setText(
            "Активен" if tmp["equipment_status"] else "Не активен"
        )

    def equip_data_placeholder(self):
        self.equip_table_placeholder()
        self.current_equip_id = self.equip_table_widget.item(0, 0).text()
        self.equip_table_widget.selectRow(0)
        self.equip_GB_placeholder()

    def sensor_data_placeholder(self):
        self.sensor_table_placeholder(self.current_equip_id)
        if int(self.current_equip_id) in self.equip_sensor_rel.keys():
            self.current_sensor_id = self.sensor_table_widget.item(0, 0).text()
            self.sensor_table_widget.selectRow(0)
            self.sensor_GB_placeholder()

    # button slots
    def risk_add_button_slot(self):
        """_summary_"""
        Dialog = QtWidgets.QDialog()
        addRiskDialogWindow = addRiskUIDialog()
        addRiskDialogWindow.setupUi(Dialog)
        Dialog.exec()
        self.risk_refresh_button_slot()

    def pm_add_button_slot(self):
        """_summary_"""
        Dialog = QtWidgets.QDialog()
        addMeasureDialogWindow = addMeasureUIDialog()
        addMeasureDialogWindow.setupUi(Dialog, int(self.current_risk_id))
        Dialog.exec()
        self.pm_refresh_button_slot()

    def sensor_add_button_slot(self):
        """_summary_"""
        Dialog = QtWidgets.QDialog()
        addSensorDialogWindow = addSensorUIDIalog()
        addSensorDialogWindow.setupUi(
            Dialog=Dialog, current_equip_id=int(self.current_equip_id)
        )
        Dialog.exec()
        self.sensor_refresh_button_slot()

    def equip_add_button_slot(self):
        """_summary_"""
        Dialog = QtWidgets.QDialog()
        addEquipDialogWindow = addEquipUIDIalog()
        addEquipDialogWindow.setupUi(Dialog=Dialog)
        Dialog.exec()
        self.equip_refresh_button_slot()

    def risk_edit_button_slot(self):
        """_summary_"""
        Dialog = QtWidgets.QDialog()
        editRiskDialogWindow = editRiskUIDialog()
        editRiskDialogWindow.setupUi(Dialog, self.current_risk_id)
        Dialog.exec()
        self.risk_refresh_button_slot()

    def pm_edit_button_slot(self):
        """_summary_"""
        Dialog = QtWidgets.QDialog()
        editPMDialogWindow = editMeasureUIDialog()
        editPMDialogWindow.setupUi(Dialog, self.current_pm_id)
        Dialog.exec()
        self.pm_refresh_button_slot()

    def sensor_edit_button_slot(self):
        """_summary_"""
        Dialog = QtWidgets.QDialog()
        editSensorDialogWindow = editSensorUIDIalog()
        editSensorDialogWindow.setupUi(
            Dialog, self.current_equip_id, self.current_sensor_id
        )
        Dialog.exec()
        self.sensor_data_placeholder()

    def equip_edit_button_slot(self):
        """_summary_"""
        Dialog = QtWidgets.QDialog()
        editEquipDialogWindow = editEquipUIDIalog()
        editEquipDialogWindow.setupUi(Dialog, self.current_equip_id)
        Dialog.exec()
        self.equip_data_placeholder()

    def risk_delete_button_slot(self):
        dlg = deleteConfirmWindow()
        reply = dlg.exec()
        if reply == QtWidgets.QMessageBox.StandardButton.Yes:
            qc = queryComposer("risk_register")
            cond = [
                {
                    "key_name": "risk_id",
                    "comp_operand": "=",
                    "key_value": self.current_risk_id,
                }
            ]
            qc.delete_query(conditions=cond)
            qc.close_connection()
            self.risk_refresh_button_slot()

    def pm_delete_button_slot(self):
        dlg = deleteConfirmWindow()
        reply = dlg.exec()
        if reply == QtWidgets.QMessageBox.StandardButton.Yes:
            qc = queryComposer("prevention_measures")
            cond = [
                {
                    "key_name": "prevention_measure_id",
                    "comp_operand": "=",
                    "key_value": self.current_pm_id,
                }
            ]
            qc.delete_query(conditions=cond)
            qc.close_connection()
            self.pm_refresh_button_slot()

    def equip_delete_button_slot(self):
        dlg = deleteConfirmWindow()
        reply = dlg.exec()
        if reply == QtWidgets.QMessageBox.StandardButton.Yes:
            qc = queryComposer("equipment")
            cond = [
                {
                    "key_name": "equipment_id",
                    "comp_operand": "=",
                    "key_value": self.current_equip_id,
                }
            ]
            qc.delete_query(conditions=cond)
            qc.close_connection()
            self.equip_refresh_button_slot()

    def sensor_delete_button_slot(self):
        dlg = deleteConfirmWindow()
        reply = dlg.exec()
        if reply == QtWidgets.QMessageBox.StandardButton.Yes:
            qc = queryComposer("sensor")
            cond = [
                {
                    "key_name": "sensor_id",
                    "comp_operand": "=",
                    "key_value": self.current_sensor_id,
                }
            ]
            qc.delete_query(conditions=cond)
            self.sensor_refresh_button_slot()

    def risk_refresh_button_slot(self):
        """_summary_"""
        self.risk_data_loader()
        self.risk_table_placeholder()

    def pm_refresh_button_slot(self):
        """_summary_"""
        self.pm_data_loader()
        self.pm_table_placeholder(self.current_risk_id)

    def equip_refresh_button_slot(self):
        """ """
        self.equip_data_loader()
        self.equip_data_placeholder()

    def sensor_refresh_button_slot(self):
        """ """
        self.sensor_data_loader()
        self.sensor_data_placeholder()

    # additional button slots
    def week_button_slot(self):
        last_sensor_plot(self.current_sensor_id, period="week")

    def day_button_slot(self):
        last_sensor_plot(self.current_sensor_id, period="day")

    def hour_button_slot(self):
        last_sensor_plot(self.current_sensor_id, period="hour")

    # row selectors
    def risk_row_selector(self):
        """_summary_"""
        self.current_risk_id = self.risk_register_table_widget.item(
            self.risk_register_table_widget.currentRow(), 0
        ).text()
        self.risk_register_table_widget.selectRow(
            self.risk_register_table_widget.currentRow()
        )
        self.pm_table_placeholder(self.current_risk_id)

    def pm_row_selector(self):
        """_summary_"""
        self.current_pm_id = self.pm_table_widget.item(
            self.pm_table_widget.currentRow(), 0
        ).text()
        self.pm_table_widget.selectRow(self.pm_table_widget.currentRow())

    def equipment_row_selector(self):
        """_summary_"""
        self.current_equip_id = self.equip_table_widget.item(
            self.equip_table_widget.currentRow(), 0
        ).text()
        self.equip_table_widget.selectRow(self.equip_table_widget.currentRow())
        self.equip_GB_placeholder()
        self.sensor_table_placeholder(self.current_equip_id)

    def sensor_row_selector(self):
        """_summary_"""
        self.current_sensor_id = self.sensor_table_widget.item(
            self.sensor_table_widget.currentRow(), 0
        ).text()
        self.sensor_table_widget.selectRow(self.sensor_table_widget.currentRow())
        current_sensor_data = self.sensor_data_id_ref[int(self.current_sensor_id)]
        current_sensor_data["unit_name"] = self.sensor_unit_id_ref[
            current_sensor_data["unit_id"]
        ]
        self.graphical_view_layout.removeWidget(self.canvas)
        self.canvas = MplCanvas(
            parent=self.equipment_tab,
            width=5,
            height=4,
            dpi=100,
            current_sensor_data=current_sensor_data,
        )
        self.graphical_view_layout.addWidget(self.canvas)
        self.sensor_GB_placeholder()

    # plot updater
    def update_plot(self):
        # Drop off the first y element, append a new one.
        qc = queryComposer("sensor_logs")
        cond = [
            {
                "key_name": "sensor_id",
                "comp_operand": "=",
                "key_value": self.current_sensor_id,
            },
            {
                "key_name": "log_datetime",
                "comp_operand": ">=",
                "key_value": "now()-interval '1 minute'",
            },
            {
                "key_name": "log_datetime",
                "comp_operand": "<=",
                "key_value": "now()",
            },
        ]
        raw_data = qc.select_query(conditions=cond, order_opt=["log_datetime"])
        qc.close_connection()
        current_time = datetime.datetime.now().replace(microsecond=0)
        y_data = []
        x_data = []
        for rec in raw_data:
            y_data.append(rec["sensor_value"])
            x_data.append((current_time - rec["log_datetime"]).total_seconds())
        x_data.reverse()
        y_data.reverse()
        self.canvas.update_plot(x_data, y_data)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())

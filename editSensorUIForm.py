# Form implementation generated from reading ui file 'editSensorUIDIalog.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from db_operation_functions import queryComposer
from PyQt6 import QtCore, QtGui, QtWidgets
from functools import partial
import datetime


class addUnitUIDialog(object):
    def setupUi(self, Dialog, sensor_type_id):
        Dialog.setObjectName("Dialog")
        Dialog.resize(260, 90)
        self.current_sensor_type_id = sensor_type_id
        self.horizontalLayoutWidget = QtWidgets.QWidget(parent=Dialog)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 235, 25))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(parent=self.horizontalLayoutWidget)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(parent=self.horizontalLayoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(parent=Dialog)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(50, 45, 195, 30))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.confirmButton = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget_2)
        self.confirmButton.setObjectName("confirmButton")
        confirm_button = partial(self.confirm_button_slot, Dialog=Dialog)
        self.confirmButton.clicked.connect(confirm_button)
        self.horizontalLayout_2.addWidget(self.confirmButton)
        self.cancelButton = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget_2)
        self.cancelButton.setObjectName("cancelButton")
        self.cancelButton.clicked.connect(lambda: Dialog.close())
        self.horizontalLayout_2.addWidget(self.cancelButton)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "Единица измерения"))
        self.confirmButton.setText(_translate("Dialog", "Добавить"))
        self.cancelButton.setText(_translate("Dialog", "Отмена"))

    def confirm_button_slot(self, Dialog: QtWidgets.QDialog = None):
        qc = queryComposer("sensor_unit")
        qc.insert_query(
            {
                "unit_name": self.lineEdit.text(),
                "sensor_type_id": self.current_sensor_type_id,
            }
        )
        qc.close_connection()
        Dialog.close()


class addTypeUIDialog(object):
    def setupUi(self, Dialog: QtWidgets.QDialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(260, 90)
        self.horizontalLayoutWidget = QtWidgets.QWidget(parent=Dialog)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 235, 25))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(parent=self.horizontalLayoutWidget)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(parent=self.horizontalLayoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(parent=Dialog)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(50, 45, 195, 30))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.confirmButton = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget_2)
        self.confirmButton.setObjectName("confirmButton")
        confirm_button = partial(self.confirm_button_slot, Dialog=Dialog)
        self.confirmButton.clicked.connect(confirm_button)
        self.horizontalLayout_2.addWidget(self.confirmButton)
        self.cancelButton = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget_2)
        self.cancelButton.setObjectName("cancelButton")
        self.cancelButton.clicked.connect(lambda: Dialog.close())
        self.horizontalLayout_2.addWidget(self.cancelButton)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "Название типа"))
        self.confirmButton.setText(_translate("Dialog", "Добавить"))
        self.cancelButton.setText(_translate("Dialog", "Отмена"))

    def confirm_button_slot(self, Dialog: QtWidgets.QDialog = None):
        qc = queryComposer("sensor_type")
        qc.insert_query({"sensor_type_name": self.lineEdit.text()})
        qc.close_connection()
        Dialog.close()


class editSensorUIDIalog(object):
    def setupUi(
        self, Dialog: QtWidgets.QDialog, current_equip_id: int, current_sensor_id: int
    ):
        Dialog.setObjectName("Dialog")
        Dialog.resize(370, 300)
        self.current_equip_id = current_equip_id
        self.current_sensor_id = current_sensor_id
        self.formLayoutWidget = QtWidgets.QWidget(parent=Dialog)
        self.formLayoutWidget.setGeometry(QtCore.QRect(20, 10, 330, 240))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.formLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setHorizontalSpacing(15)
        self.gridLayout.setVerticalSpacing(20)
        self.gridLayout.setObjectName("gridLayout")

        self.equipmentLabel = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.equipmentLabel.setObjectName("equipmentLabel")
        self.equipmentLabel.setText("Оборудование")
        self.gridLayout.addWidget(self.equipmentLabel, 0, 0, 1, 1)
        self.equipmentComboBox = QtWidgets.QComboBox(parent=self.formLayoutWidget)
        self.equipmentComboBox.setObjectName("equipmentComboBox")
        self.gridLayout.addWidget(self.equipmentComboBox, 0, 1, 1, 1)
        self.sensorNameLabel = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.sensorNameLabel.setObjectName("sensorNameLabel")
        self.gridLayout.addWidget(self.sensorNameLabel, 1, 0, 1, 1)
        self.sensorNameField = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.sensorNameField.setObjectName("sensorNameField")
        self.gridLayout.addWidget(self.sensorNameField, 1, 1, 1, 1)
        self.sensorTypeLabel = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.sensorTypeLabel.setObjectName("sensorTypeLabel")
        self.gridLayout.addWidget(self.sensorTypeLabel, 2, 0, 1, 1)
        self.sensorTypeComboBox = QtWidgets.QComboBox(parent=self.formLayoutWidget)
        self.sensorTypeComboBox.setObjectName("sensorTypeComboBox")
        self.gridLayout.addWidget(self.sensorTypeComboBox, 2, 1, 1, 1)
        self.sensorTypeAddButton = QtWidgets.QToolButton(parent=self.formLayoutWidget)
        self.sensorTypeAddButton.setObjectName("sensorTypeAddButton")
        self.sensorTypeAddButton.clicked.connect(self.add_type_button)
        self.gridLayout.addWidget(self.sensorTypeAddButton, 2, 2, 1, 1)
        self.sensorUnitLabel = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.sensorUnitLabel.setObjectName("sensorUnitLabel")
        self.gridLayout.addWidget(self.sensorUnitLabel, 3, 0, 1, 1)
        self.sensorUnitComboBox = QtWidgets.QComboBox(parent=self.formLayoutWidget)
        self.sensorUnitComboBox.setObjectName("sensorUnitComboBox")
        self.gridLayout.addWidget(self.sensorUnitComboBox, 3, 1, 1, 1)
        self.sensorUnitAddButton = QtWidgets.QToolButton(parent=self.formLayoutWidget)
        self.sensorUnitAddButton.setObjectName("sensorUnitAddButton")
        self.sensorUnitAddButton.clicked.connect(self.add_unit_button)
        self.gridLayout.addWidget(self.sensorUnitAddButton, 3, 2, 1, 1)
        self.sensorLimitLabel = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.sensorLimitLabel.setObjectName("sensorLimitLabel")
        self.gridLayout.addWidget(self.sensorLimitLabel, 4, 0, 1, 1)
        self.sensorLimitField = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.sensorLimitField.setObjectName("sensorLimitField")
        self.sensorLimitField.setValidator(QtGui.QDoubleValidator())
        self.gridLayout.addWidget(self.sensorLimitField, 4, 1, 1, 1)
        self.sensorLifetimeLabel = QtWidgets.QLabel(parent=self.formLayoutWidget)
        self.sensorLifetimeLabel.setObjectName("sensorLifetimeLabel")
        self.gridLayout.addWidget(self.sensorLifetimeLabel, 5, 0, 1, 1)
        self.sensorLifetimeField = QtWidgets.QLineEdit(parent=self.formLayoutWidget)
        self.sensorLifetimeField.setObjectName("sensorLifetimeField")
        self.sensorLifetimeField.setValidator(QtGui.QDoubleValidator())
        self.gridLayout.addWidget(self.sensorLifetimeField, 5, 1, 1, 1)

        self.horizontalLayoutWidget = QtWidgets.QWidget(parent=Dialog)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(150, 260, 195, 30))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.sensorConfirmButton = QtWidgets.QPushButton(
            parent=self.horizontalLayoutWidget
        )
        confirm_button = partial(self.confirm_button_slot, Dialog=Dialog)
        self.sensorConfirmButton.clicked.connect(confirm_button)
        self.sensorConfirmButton.setObjectName("sensorConfirmButton")
        self.horizontalLayout.addWidget(self.sensorConfirmButton)
        self.sensorCancelButton = QtWidgets.QPushButton(
            parent=self.horizontalLayoutWidget
        )
        self.sensorCancelButton.setObjectName("sensorCancelButton")
        self.sensorCancelButton.clicked.connect(lambda: Dialog.close())
        self.horizontalLayout.addWidget(self.sensorCancelButton)

        # data loader
        self.sensor_type_placeholder()
        self.sensor_unit_placeholder()
        self.equip_data_placeholder()
        self.sensor_data_placeholder()

        self.sensorTypeComboBox.currentIndexChanged.connect(
            self.sensor_unit_placeholder
        )

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Изменение датчика"))
        self.sensorLifetimeLabel.setText(_translate("Dialog", "Срок работы"))
        self.sensorUnitLabel.setText(_translate("Dialog", "Единица измерения"))
        self.sensorTypeLabel.setText(_translate("Dialog", "Тип датчика"))
        self.sensorLimitLabel.setText(_translate("Dialog", "Предельный значение"))
        self.sensorTypeAddButton.setText(_translate("Dialog", "+"))
        self.sensorUnitAddButton.setText(_translate("Dialog", "+"))
        self.sensorNameLabel.setText(_translate("Dialog", "Название датчика"))
        self.sensorConfirmButton.setText(_translate("Dialog", "Изменить"))
        self.sensorCancelButton.setText(_translate("Dialog", "Отмена"))

    def sensor_type_data_loader(self):
        qct = queryComposer("sensor_type")
        raw_type_data = qct.select_query(order_opt=["sensor_type_id"])
        qct.close_connection()
        self.sensor_type_id_ref = {
            s_type["sensor_type_id"]: s_type["sensor_type_name"]
            for s_type in raw_type_data
        }

    def sensor_data_loader(self, sensor_id):
        qc = queryComposer("sensor")
        raw_sensor_data = qc.select_query(
            conditions=[
                {
                    "key_name": "sensor_id",
                    "comp_operand": "=",
                    "key_value": sensor_id,
                }
            ]
        )
        self.current_sensor_data_values = raw_sensor_data[0]

    def sensor_unit_data_loader(self):
        qcu = queryComposer("sensor_unit")
        raw_sensor_unit_data = qcu.select_query(order_opt=["unit_id"])
        self.sensor_unit_id_ref = {
            unit["unit_id"]: unit["unit_name"] for unit in raw_sensor_unit_data
        }
        self.sensor_unit_type_rel = {}
        for unit in raw_sensor_unit_data:
            if unit["sensor_type_id"] not in self.sensor_unit_type_rel.keys():
                self.sensor_unit_type_rel[unit["sensor_type_id"]] = []
            self.sensor_unit_type_rel[unit["sensor_type_id"]].append(unit["unit_id"])

    def equipment_data_loader(self):
        qc = queryComposer("equipment")
        raw_equipment_data = qc.select_query(order_opt=["equipment_id"])
        qc.close_connection()
        self.equipment_id_ref = {
            equip["equipment_id"]: equip["equipment_name"]
            for equip in raw_equipment_data
        }

    def sensor_type_placeholder(self):
        self.sensor_type_data_loader()
        self.sensorTypeComboBox.clear()
        self.sensorTypeComboBox.addItems(self.sensor_type_id_ref.values())

    def sensor_unit_placeholder(self):
        self.sensor_unit_data_loader()
        current_type_id = list(self.sensor_type_id_ref.keys())[
            self.sensorTypeComboBox.currentIndex()
        ]
        # current_type_id = list(self.sensor_type_id_ref.keys())[
        #     list(self.sensor_type_id_ref.values()).index(
        #         self.sensorTypeComboBox.currentText()
        #     )
        # ]
        self.sensorConfirmButton.setEnabled(True)
        self.sensorUnitComboBox.clear()
        if current_type_id not in self.sensor_unit_type_rel.keys():
            self.sensorConfirmButton.setEnabled(False)
            return
        self.sensorUnitComboBox.addItems(
            [
                self.sensor_unit_id_ref[unit]
                for unit in self.sensor_unit_type_rel[current_type_id]
            ]
        )

    def sensor_data_placeholder(self):
        self.sensor_data_loader(self.current_sensor_id)
        tmp = self.current_sensor_data_values
        self.equipmentComboBox.setCurrentIndex(
            list(self.equipment_id_ref.keys()).index(int(self.current_equip_id))
        )
        self.sensorNameField.setText(tmp["sensor_name"])
        self.sensorLimitField.setText(str(tmp["limit_mode_value"]))
        self.sensorLifetimeField.setText(str(tmp["sensor_average_lifetime"]))
        self.sensorTypeComboBox.setCurrentIndex(
            list(self.sensor_type_id_ref.keys()).index(tmp["sensor_type_id"])
        )
        self.sensorUnitComboBox.setCurrentIndex(
            list(self.sensor_unit_id_ref.keys()).index(tmp["unit_id"])
        )

    def equip_data_placeholder(self):
        self.equipment_data_loader()
        self.equipmentComboBox.addItems(self.equipment_id_ref.values())

    def confirm_button_slot(self, Dialog: QtWidgets.QDialog = None):
        qc = queryComposer("sensor")

        self.current_sensor_data_values["sensor_name"] = self.sensorNameField.text()
        self.current_sensor_data_values[
            "limit_mode_value"
        ] = self.sensorLimitField.text()
        self.current_sensor_data_values[
            "sensor_average_lifetime"
        ] = self.sensorLifetimeField.text()
        self.current_sensor_data_values["sensor_type_id"] = list(
            self.sensor_type_id_ref.keys()
        )[
            list(self.sensor_type_id_ref.values()).index(
                self.sensorTypeComboBox.currentText()
            )
        ]
        self.current_sensor_data_values["unit_id"] = list(
            self.sensor_unit_id_ref.keys()
        )[
            list(self.sensor_unit_id_ref.values()).index(
                self.sensorUnitComboBox.currentText()
            )
        ]
        self.current_sensor_data_values["equipment_id"] = list(
            self.equipment_id_ref.keys()
        )[self.equipmentComboBox.currentIndex()]
        # values["sensor_installation_date"] = str(datetime.date.today())
        qc.update_query(self.current_sensor_data_values)
        qc.close_connection()
        # here inquisition
        Dialog.close()

    def add_type_button(self):
        typeDialog = QtWidgets.QDialog()
        addTypeUIForm = addTypeUIDialog()
        addTypeUIForm.setupUi(typeDialog)
        typeDialog.exec()
        self.sensor_type_placeholder()

    def add_unit_button(self):
        unitDialog = QtWidgets.QDialog()
        addUnitUIForm = addUnitUIDialog()
        addUnitUIForm.setupUi(
            unitDialog,
            list(self.sensor_type_id_ref.keys())[
                list(self.sensor_type_id_ref.values()).index(
                    self.sensorTypeComboBox.currentText()
                )
            ],
        )
        unitDialog.exec()
        self.sensor_unit_placeholder()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = editSensorUIDIalog()
    ui.setupUi(Dialog, 1, 1)
    Dialog.show()
    sys.exit(app.exec())
